/******************************************************************************
* This file was generated by ZenStack CLI 2.9.2.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OrganizationMembership } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateOrganizationMembership(options?: Omit<(UseMutationOptions<(OrganizationMembership | undefined), DefaultError, Prisma.OrganizationMembershipCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipCreateArgs, DefaultError, OrganizationMembership, true>('OrganizationMembership', 'POST', `${endpoint}/organizationMembership/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOrganizationMembership(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrganizationMembershipCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrganizationMembership', 'POST', `${endpoint}/organizationMembership/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindManyArgs, TQueryFnData = Array<Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindManyArgs, TQueryFnData = Array<Prisma.OrganizationMembershipGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findMany`, args, options, fetch);
}

export function useSuspenseFindManyOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindManyArgs, TQueryFnData = Array<Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindManyArgs, TQueryFnData = Array<Prisma.OrganizationMembershipGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findMany`, args, options, fetch);
}

export function useFindUniqueOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindUniqueArgs, TQueryFnData = Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindUniqueArgs, TQueryFnData = Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findUnique`, args, options, fetch);
}

export function useFindFirstOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindFirstArgs, TQueryFnData = Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstOrganizationMembership<TArgs extends Prisma.OrganizationMembershipFindFirstArgs, TQueryFnData = Prisma.OrganizationMembershipGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/findFirst`, args, options, fetch);
}

export function useUpdateOrganizationMembership(options?: Omit<(UseMutationOptions<(OrganizationMembership | undefined), DefaultError, Prisma.OrganizationMembershipUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipUpdateArgs, DefaultError, OrganizationMembership, true>('OrganizationMembership', 'PUT', `${endpoint}/organizationMembership/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOrganizationMembership(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrganizationMembershipUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrganizationMembership', 'PUT', `${endpoint}/organizationMembership/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOrganizationMembership(options?: Omit<(UseMutationOptions<(OrganizationMembership | undefined), DefaultError, Prisma.OrganizationMembershipUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipUpsertArgs, DefaultError, OrganizationMembership, true>('OrganizationMembership', 'POST', `${endpoint}/organizationMembership/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOrganizationMembership(options?: Omit<(UseMutationOptions<(OrganizationMembership | undefined), DefaultError, Prisma.OrganizationMembershipDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipDeleteArgs, DefaultError, OrganizationMembership, true>('OrganizationMembership', 'DELETE', `${endpoint}/organizationMembership/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrganizationMembership, Prisma.OrganizationMembershipGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOrganizationMembership(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrganizationMembershipDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrganizationMembershipDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OrganizationMembership', 'DELETE', `${endpoint}/organizationMembership/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrganizationMembershipDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrganizationMembershipDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrganizationMembershipDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOrganizationMembership<TArgs extends Prisma.OrganizationMembershipAggregateArgs, TQueryFnData = Prisma.GetOrganizationMembershipAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateOrganizationMembership<TArgs extends Prisma.OrganizationMembershipAggregateArgs, TQueryFnData = Prisma.GetOrganizationMembershipAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/aggregate`, args, options, fetch);
}

export function useGroupByOrganizationMembership<TArgs extends Prisma.OrganizationMembershipGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrganizationMembershipGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrganizationMembershipGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrganizationMembershipGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OrganizationMembershipGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OrganizationMembershipGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OrganizationMembershipGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrganizationMembershipGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByOrganizationMembership<TArgs extends Prisma.OrganizationMembershipGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrganizationMembershipGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrganizationMembershipGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrganizationMembershipGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OrganizationMembershipGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OrganizationMembershipGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OrganizationMembershipGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrganizationMembershipGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/groupBy`, args, options, fetch);
}

export function useCountOrganizationMembership<TArgs extends Prisma.OrganizationMembershipCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrganizationMembershipCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/count`, args, options, fetch);
}

export function useSuspenseCountOrganizationMembership<TArgs extends Prisma.OrganizationMembershipCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrganizationMembershipCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrganizationMembershipCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrganizationMembership', `${endpoint}/organizationMembership/count`, args, options, fetch);
}
import type { Role } from '@zenstackhq/runtime/models';

export function useCheckOrganizationMembership<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; userId?: string; orgId?: string; role?: Role }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OrganizationMembership', `${endpoint}/organizationMembership/check`, args, options, fetch);
}
